// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String
  password     String
  userInGroups UserInGroup[]
  itemData     ItemData[]
  serviceData  ServiceData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserInGroup {
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
}

model Group {
  id           String        @id @default(cuid())
  name         String
  usersInGroup UserInGroup[]
  items        Item[]
  services     Service[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id         String     @id @default(cuid())
  name       String
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    String
  itemData   ItemData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemData {
  id          String  @id @default(cuid())
  value       String?
  description String?
  item        Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String        @id @default(cuid())
  name        String
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  serviceData ServiceData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceData {
  id          String  @id @default(cuid())
  description String?
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(cuid())
  name  String
  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
